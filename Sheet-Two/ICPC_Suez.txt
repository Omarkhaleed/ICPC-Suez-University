
====ICPC SU Sheet 1======

//////////////////////////////
1 ==> A. Vanya and Fence

    the idea is  that every one has width 1 if his height <= fence height   
    else   the width of person will be 2

int number, height;
		cin >> number >> height;
		int input;
		int sum = 0;
		while (number--) {
			cin >> input;
			if (input <= height)
				sum += 1;
			else
				sum += 2;
 
		}
		cout << sum << "\n";

=========================================================

2 ==> A. Anton and Danik

       The idea is that they want play chess if char is A then Anton won 
       else   the Dankik won  else  FriendShip if the equal 

int number;
		string s;
		cin >> number >> s;
		int sum1 = 0, sum2 = 0;
		for (int i = 0; i < s.size(); i++) {
			if (s[i] == 'A')
				sum1++;
			else
				sum2++;
 
		}
		string result = sum1 > sum2 ? "Anton" : sum2 > sum1 ? "Danik" : "Friendship";
		cout << result << "\n";

=========================================================

3 ==> A. Bear and Big Brother

    
    the idea that  each year limak's weight trippled and Bob doubled 
    count year then when limake became greater than then strop

     int a, b;
    cin >> a >> b;
    int years = 0;
    while (a <= b) {
        a *= 3;
        b *= 2;
        years++;
    }
    cout <<years << "\n";

=========================================================

4 ==> A. Team
                
        if at least two of them know the problem  then the will solve else no
	int size;
	cin >> size;
	int sum = 0, count = 0;
	int num1,num2,num3;
	while(size--){
		cin >> num1 >> num2 >> num3;
		if ((num1 + num2 + num3) >= 2)
			count++;
	}
	cout << count << "\n";

=========================================================

5 ==> A. Beautiful Matrix
      
   the idea is 

#define sc(x) scanf("%d", &x)

      الفكرة هنا  انك بتعد كام خطوة هتحرك فيها الواحد عشان تجيبه ف النص ف بتجمع كام مرة حركته عشان توصل للصف الثالث وهكذا  العمود الثالث
   int num = 0;
    for (int i = 1; i <= 5; i++) {
        for (int j = 1; j <= 5; j++) {
            sc(num);
            if (num == 1) {
                cout << abs(i - 3) + abs(j - 3) << "\n"; 
            }
        }
    }

=========================================================
6 ==> A. Gravity Flip

   كل البوكسس ببتزحلق ع اليمين ف هتلاحظ ف الاخر انا اول عمود ممن اليمين اكتر عمود فيبه  مكعبات  ف لو رتبتهم تصاعدي يطلع الحل معاك

vector<int>v;
	int size;
	cin >> size;
	int input;
	while(size--){
		cin >> input;
		v.push_back(input);
	}
	sort(v.begin(), v.end());
	for (auto i : v)
		cout << i << " ";
=========================================================
 7==> A. Petya and Strings
   

string convert(string s) {
	for_each(s.begin(), s.end(), [](char& c) {
		c = tolower(c);
		});
	return s;
}


string s1, s2;
	cin >> s1 >> s2;
	string s1new=convert(s1);
	string s2new=convert(s2);
	int flag = 0;
	int n = s1.size();
	
	int i = 0;
	//aaaa aaaa
	
		for (int j = 0; j < n; j++) {
			if (s1new[j] < s2new[j]) {
				flag = -1;
				break;
			}
			else if (s1new[j] > s2new[j]) {
				flag = 1;
				break;
			}
			else
				flag = 0;
			
	
	    } 
	cout << flag << "\n";

=========================================================

8==> A. Boy or Girl

        الفكرة انك بتشيل اي حرف اتكرر قبل كده عشان يبقي كلها حروف مميزة مافيش حرف بيتكرر وبتعدهم وبتشوف بقا زوجي ولا فردي
string removeDuplicate(string str)
{
	int length = str.length();
	for (unsigned int i = 0; i < length-1; i++)
	{
		char currChar = str[i]; //holds current character
		for (unsigned int j = i + 1; j < length; j++)
		{
			if (currChar == str[j])
				str.erase(std::remove(str.begin() + j, str.end(), str[j]), str.end());
		}
	}
	return str;
 
}

string s;
cin >> s;

if ((removeDuplicate(s).size()) % 2 == 0)
		cout << "CHAT WITH HER!" << "\n";
	else
		cout << "IGNORE HIM!" << "\n";

     /////// another solutuon 

  string s;

    cin>>s;

    l=s.length();

    sort(s.begin(),s.end());

    for (i = 1; i<l; i++)
    {
        if (s[i] != s[i -1] )

        {
            count++;
        }

    }
 if((count+1)%2==0)

    {
        cout<<<<"CHAT WITH HER!"<<"\n";
    }

    else

    {
        else<<"IGNORE HIM!"<<"\n";
    }

///////////////////////////////

=========================================================

==> 9-A. Word
  
الفكرة ان لو عدد جروف الكابيتال اكبر بحولها كلها لكابيتال غير كد حول ل سماال
string Upper(string s) {
	for_each(s.begin(), s.end(), [](char& c) {
		c = toupper(c);
		});
	return s;
}
string Lower(string s) {
	for_each(s.begin(), s.end(), [](char& c) {
		c = tolower(c);
		});
	return s;
}

              string s;
		cin >> s;
		int length = s.size();
		int capital = 0, small = 0;
		for (int j = 0; j < length; j++) {
			if (int(s[j]) >= 65 && int(s[j]) <= 90)
				capital++;
			else
				small++;
		}
		if (capital > small)
			cout << Upper(s) << "\n";
		else
			cout << Lower(s) << "\n";

=========================================================

==>  10- G. Magnets

    int n;
    cin>>n;
    int magnets[n],count=1;
    for (int i=0; i<n;i++)
        cin>>magnets[i];
    for (int j=0 ;j<n-1;j++){
        if (magnets[j]!=magnets[j+1])
            count++;
    }   
    cout<<count<<endl;
	 
=========================================================

==>  11- seriga and dema

        

 int size;
    cin >>size;
    vector<int>v;
    while (size--) {
        int input;
        cin >> input;
        v.push_back(input);
    }
    int sereja = 0, dima = 0;
     // for the last index index 
    int len = v.size() - 1;
    while (len >= 0) {
  // if i had one element
        if (len == 0) {
            sereja += v[len];
        }
        else {
            if (v[len] > v[0]) {
                sereja += v[len];
                v.pop_back();
            }
            else {
                sereja += v[0];
                v.erase(v.begin());
            }
        }
        len--;
        if (len < 0)
            break;
        if (len == 0) {
            dima += v[len];
        }
        else {
            if (v[len] > v[0]) {
                dima += v[len];
                v.pop_back();
            }
            else {
                dima += v[0];
                v.erase(v.begin());
            }
        }
        len--;
    }
    
    cout << sereja << " " << dima << "\n";
	
=========================================================

12==> A. Stones on the Table

   int length;
	cin >> length;
	string s;
	cin >> s;
	
	int count = 0;
	for (int i = 0; i <length-1; i++) {
		if (s[i] == s[i + 1])
			count++;
			
	}
	cout << count << "\n";

=========================================================


13==> A. Police Recruits


لو فيه عندي ظابط هيتعامل مع الجريمة طب لو دخلت جريمة ومافيش ظابط عندي  يبقي يزداد عدد الجرايم حتي لو جه ظباط بعدهاا ماليش دعوه كده الجريمة اتحسبت


int police = 0, crime = 0, crime2 = 0;
    int size; int count=0;
    cin >> size;
    while (size--) {
        int input;
        cin >> input;
        if (input > 0) {
            police += input;
        }
        else
        {
            if (police == 0) 
                count++;
            else 
                police--;
        }
    }
    cout << count << "\n";



=========================================================

14==> A. Black Square

  اول سطر بيبقي عدد السعرات الحرارية اللي بيفقده ف كبل مربع بالترتيب 
1 2 3 4 
كده هول ف الاول فقد 1 ولما داس ع المربع الثاني فقد 2 سعرة وهكذا 
 int size = 4;
	int input;
	while (size--) {
		cin >> input;
		v.push_back(input);
 
	}
	int sum1 = accumulate(v.begin(), v.end(), 0);
	if (sum1 == 0)
		cout << sum1<<"\n";
	else {
		int sum2 = 0;
		string s;
		cin >> s;
		for (int i = 0; i < s.size(); i++) {
			int num = s[i] - '0';
			sum2 += v[num - 1];
		}
		cout << sum2<< "\n";
	}

=========================================================

15==>  A. Night at the Museum


بشوف بعد المسافة من اول عنصر  وبعد كده بشوف بعده من ناحية اخر عنصر وهوا ال زيد والاصغر امشيه يعني اضيفه عندي
 بعد كده العنصر اللي بقف عليه بشوف من انهي ناحية اصغر اني اتحرك للعنصر اللي بعد امشي يمين واطرح عدد الخطوات منه ولا العكس؟
string s;
    cin >> s;
    char first = 'a';
    int sum = 0;
    for (int i = 0; i < s.size(); i++) {
        int distanceOne = abs(s[i]-first);
        first = s[i];
        int distance2 = 26 - abs(distanceOne);
        if (distanceOne <= distance2)
            sum += distanceOne;
        else
            sum += distance2;
       
    }
    cout << sum << "\n";

=========================================================

   ======= ICPC SU Sheet 2 =======


//////////////////////////////////////////////////

1==> A.Games
   
  n=> is the number of teams  if i had 3 teams so each one play two matches 
      so if home uniform == guest uniform increase 1   
   //  1 2        first team home=1  guest=2
       2 4        second     home=2  guest=4
       3 4 

vector<int>v1;
	vector<int>v2;
	int size;
	cin >> size;
	int input1,input2;
	while (size--) {
		cin >> input1 >> input2;
		v1.push_back(input1);
		v2.push_back(input2);
	}
 
	int count=0;
	for (int i = 0; i < v1.size(); i++) {
		for (int j = 0; j < v2.size(); j++) {
			if (v1[i] == v2[j])
				count++;
		}
	}
		cout << count<< "\n";
=========================================================

 2==>A. Buy a Shovel 

-->  the idea here he has alot of coins=10 so he can buy alot of shovel 
     but we need the minimum number he can buy with the only coin he has that not equal 10
      117 => price of shovel  and 3= the only coin
      but without any change ==بدون باقي

int num, coin;
	cin >> num >> coin;
	if ((num % 10) == coin || (num % 10) == 0)  
		cout << 1 << "\n";
	else{
		int sum = 0, count = 0;   
		while (num) {
			sum += num;
			count++;                                       
			if ((sum % 10) == coin || (sum % 10) == 0){
				cout << count << "\n";
			     break;
		    }
 
	    }
}
=========================================================


3==> A.Is your horseshoe on the other roof

     --> she should wear different shoes so what the minimun number she will buy
         depends on what she has.

                vector<int>v;
		int size = 4;
		int input;
		while (size--) {
			cin >> input;
			v.push_back(input);
		}
		sort(v.begin(), v.end());
		int count = 0;
		for (int i = 0; i < v.size() - 1; i++) {
			if (v[i] == v[i + 1])
				count++;
		}
 
		cout << (count) << "\n";


=========================================================

4==> A. Colorful Stones (Simplified Edition)

 string str1, str2;
    cin >> str1 >> str2;
    int count = 0;
    // the note here that the second string is always move step and compare by the first if equal the firts move
    // else stop
    for (int i = 0; i <= str2.size() - 1; i++) {
        if (str2[i] == str1[count])
            count++;
    }
    cout << count+1 << "\n";

=========================================================

5==>A. Die Roll

int num1, num2;
	cin >> num1 >> num2;
	int big = max(num1, num2);
                        //    1     2     3    4     5      6
	vector<string>v = { "1/6","1/3","1/2","2/3","5/6","1/1" };
	cout << v[6 - big] << "\n";


=========================================================

6==>A. Shaass and Oskols

  --> paint to show them... on paint..

     vector<int>v1;
	
	int wires;
	cin >> wires;
	int boxes;
	while (wires--) {
		cin >> boxes;
		v1.push_back(boxes);
	}
	int shots;
	cin >> shots;
	int row, birdNumber;
	while (shots--) {
		cin >> row >> birdNumber;
		row--;
		//up
		if(row!=0)
		v1[row - 1] += birdNumber - 1;
		//down
		if (row != v1.size() - 1)
			v1[row + 1] += v1[row] - birdNumber;
		//clear
		v1[row] = 0;
	}
	
	for(int i=0;i<v1.size();i++){
		cout << v1[i] << "\n";
	}
 

=========================================================


7==>A. Juicer


vector<ll>v1;
	
	ll n, size, bigSize;
	cin >> n >> size >> bigSize;
	ll input;
	while (n--)
	{
		cin >> input;
		v1.push_back(input);
	}
	ll sum = 0, count = 0;
	for (int i = 0; i < v1.size(); i++) {
		if (v1[i] <= size) {
			sum += v1[i];
			if(sum>bigSize){
				count++;
			sum = 0;
			}
		}
	
	  }
	cout << count << "\n";

=========================================================

8==>A. Carrot Cakes

		int n, t, k, d;
		cin >> n >> t >> k >> d;
		double div = n / k;
		int oven1 = 0;
		if (n%k==0) {
			 oven1 = (n / k) * t;
		}
		else
			 oven1 =( (n / k)+1) * t;
 
		
		int oven2 = t + d;
		if (oven2 >= oven1 || n<k)
			cout << "NO" << "\n";
		else
			cout << "YES" << "\n";
	
=========================================================

9==>A. Anton and Letters


       // First Solution
       string s;
	getline(cin, s);
	string ss = "";
	int count = 0;
	for (int i = 1; i < s.size(); i++) {
		if(s[i] >= 'a' && s[i] <= 'z')
		  ss += s[i];
	}
	//
	int length = ss.size();
	sort(ss.begin(), ss.end());
	for (int i = 0; i < length - 1; i++) {
		if (ss[i] == ss[i + 1])
			count++;
	}
	cout << length - count << "\n";
	
	// The best Code
	string s;
	set<char> st;
	getline(cin, s);
	int le = s.size();
	for (int i = 0; i < le; i++)
		if (s[i] >= 'a' && s[i] <= 'z')
			st.insert(s[i]);
	cout << st.size() << endl;

=========================================================

10==>A. Way Too Long Words


               int size, length;
		cin >> size;
		string s;
		while (size--) {
			cin >> s;
			length = s.size();
			if (length <= 10)
				cout << s << "\n";
			else
				cout << s[0] << length - 2 << s[length - 1] << "\n";
 
		}


=========================================================

11==>A. Free Ice Cream


 ll size, k; 
    ll count = 0;
    cin >> size >> k;;
    while (size--) {
        char x; int y;
        cin >> x >> y;
        if (x == '+')
            k += y;
        else
        {
            if (y > k)
                count++;
            else
                k -= y;
        }
        
    }
   
    cout << k << " " << count << "\n";



=========================================================

12==> A. Helpful Maths

 string s;
    cin >> s;
    bool flag = 1;
    while (flag) {
        flag = 0;
        for (int i = 0; i < s.size() - 1; i += 2) {
            if (s[i] > s[i + 2]) {
                swap(s[i], s[i + 2]);
                flag = 1;
            }
        }
    }
    cout << s << "\n";
=========================================================

13==>  A. Team Olympiad


vector<int>v;
    int size; int num; int one = 0, two = 0, three = 0;
    int array1[5000], array2[5000], array3[5000];
    cin >> size;
    while (size--)
    {   
        cin >> num;
        v.push_back(num);
       
 
    }
    for (int i = 0; i < v.size(); i++) {
        if (v[i] == 1) {
            array1[one] = i + 1;   // {1,3,6}  there are 3 childern
            one++;
        }
        if (v[i] == 2) {
            array2[two] = i + 1; // {5,7}       2  
            two++;
        }
        if (v[i] == 3) {
            array3[three] = i + 1;  // {2,4}    2
            three++;
        }
 
    }
    int min3 = min({one,two,three});   min of( 3,2,2}
    cout << min3 << "\n";                is 2   so we can only form 2 teams
    for (int i = 0; i < min3; i++) {
        cout << array1[i] << " " << array2[i] << " " << array3[i] << "\n";
    }



=========================================================

14==>  A. New Password



int length, k;
	string s="";
	cin >> length >> k;
	int dif = length - k;
		for(char ch='a';ch<='z';ch++){
			if (s.size() != length) {
				s += ch;
				if (s.size() == k) {
					for (int i = 0; i < s.size(); i++) {
						if (dif == 0)
							break;
						else {
							s += s[i];
							dif--;
						}
					}
				}
			}
			else
				break;
		    
 
		}
		cout << s << "\n";
=========================================================

15==>  A. Presents

int size, count = 0;
    cin >> size;
    vector<int>v(size);
    while (size--) {
        int input;
        cin >> input;
        v[input - 1] = ++count;
 
    }
    for (int i : v) {
        cout << i << " ";
    }

=========================================================

====ICPC SU Sheet 3======

1==> A. Lineland Mail


vector<int>v;
	int size;
	cin >> size;
	int input;
	while (size--) {
		cin >> input;
		v.push_back(input);
	}
	int length = v.size();
	for (int i = 0; i < length; i++) {
		if (i != 0 && i != length - 1) {
			cout << min(abs(v[i] - v[i + 1]), abs(v[i] - v[i - 1])) << " ";
			cout << max(abs(v[i] - v[0]), abs(v[i] - v[length - 1])) << "\n";
		}
		else if (i == 0 && i != length - 1) {
			cout << abs(v[i] - v[i + 1]) << " ";
			cout << max(abs(v[i] - v[length - 1])) << "\n";
		}
		else {
			cout <<abs(v[i] - v[i - 1]) << " ";
			cout <<abs(v[i] - v[0]) << "\n";
		}
	}

=========================================================

2==> A. Mahmoud and Longest Uncommon Subsequence

 string s1, s2;
    cin >> s1>>s2;
    if (s1.size() != s2.size())
        cout << max(s1.size(), s2.size()) << endl;
    else if (s1 == s2)
        cout << -1 << endl;
    else
        cout << s1.size() << endl;
=========================================================
3==> A. Oath of the Night's Watch

vector<int>v;
 
	int size;
	cin >> size;
	int input;
	while (size--) {
		cin >> input;
		v.push_back(input);
	}
	int length = v.size() - 1, count = 0;
	sort(v.begin(), v.end());
	for (int i = 1; i < length; i++) {
		if (v[0]<v[i] && v[length]>v[i])
			count++;
	}
	cout << count << "\n";

=========================================================

4==> A. Pangram


string Lower(string s) {
	for_each(s.begin(), s.end(), [](char& c) {
		c = tolower(c);
		});
	return s;
}

        int n;
	cin >> n;
	string s;
	cin >> s;
	string snew = Lower(s);
 
	if (n < 26)
		cout << "NO"<<"\n";
	else
	{
		set<char>ss;
		for (int i = 0; i < snew.size(); i++) {
			ss.insert(snew[i]);
		}
		if (ss.size() == 26)
			cout << "YES" << "\n";
		else
			cout << "NO" << "\n";
	}
 =========================================================

5==> A. Twins


vector<int>v;
 
	int size,input, sum = 0, count = 0;
	cin >> size;
	
	while (size--) {
		cin >> input;
		sum += input;
		v.push_back(input);
	}
	sort(v.rbegin(), v.rend());
	int sumfinal = 0;
	for (int i = 0; i < v.size(); i++) {
		if (sumfinal > (sum / 2))
			break;
		sumfinal += v[i];
		count++;
	}
	cout << count << "\n";
 

=========================================================
6==>  A. Keyboard

string ss = "qwertyuiopasdfghjkl;zxcvbnm,./";
	   
	char x;
	cin >> x;
	string s;
	cin >> s;
	if (x == 'R') {
		for (int i = 0; i < s.size(); i++)
			cout << ss[(ss.find(s[i])) - 1];
		     
	}
	else
	{
		for (int i = 0; i < s.size(); i++)
			cout << ss[(ss.find(s[i])) + 1];
	}
	

=========================================================
7==>  A. Snacktower



bool arr[100001];
int now = 0;
void store(int x, int current2) {

	if (x == current2);
	{
		// cout<<current2<<" *"<<endl;
		for (int i = current2; i > 0; i--) {
			if (arr[i]) {
				cout << i << " ";
				arr[i] = 0;
				now = i - 1;
			}
			else {
				break;
			}

		}


	}

}

-----> in main 
int numbers;
	cin >> numbers;
	now = numbers;
	for (int i = 0; i < numbers; i++) {
		int x;
		cin >> x;
		arr[x] = 1;
		store(x, now);
		cout << endl;

	}
=========================================================

8==>A. Even Odds

ll n, k;
	cin >> n >> k;
	if (n % 2 == 0) {
		if (k <= n / 2)
			cout << (k * 2) - 1 << "\n";
		else
			cout << (k-(n/2))*2 << "\n";
	}
	else {
		if (k <= (n / 2) + 1)
			cout << (k * 2) - 1 << "\n";
		else
			cout << (k - ((n / 2) + 1)) * 2 << "\n";
	}

===========================================================
9==> A. I Wanna Be the Guy



int n;
	cin >> n;
	set<int>guys;
	int p, q;
	cin >> p;
	int inputs;
	for (int i= 0; i < p; i++) {
		
		cin >> inputs;
		guys.insert(inputs);
	}
	cin >> q;
	for (int i = 0; i < q; i++) {
		
		cin >> inputs;
		guys.insert(inputs);
	}
	if (guys.size() == n)
		cout << "I become the guy.";
	else
		cout << "Oh, my keyboard!";


=========================================================

10==>  B. Forming Teams


















=========================================================



         ===== ICPC SU Sheet 4 ======



1==> V. Is it rated?


int max = 0,s,count=0, sum = 0;
	int size, input1,input2;
	bool flag=0;
	cin >> size;
	while (size--) {
		cin >> input1 >> input2;
		if (input1 != input2) {
			flag = 1;
			break;
		}
		if (input1 == input2) {
			sum = input1 + input2;
			if (sum > max) {
				flag = 0;
				if(max!=0)
				count++;
				
			}
			else {
				flag = 0;
				s = 3;
				
			}
			max = sum;
			
		}
 
	}
	if (flag) {
     cout << "rated" << "\n";
	}
	else if( count )
		cout << "unrated" << "\n";
	else
		cout << "maybe" << "\n";

=========================================================

2==> A. Olesya and Rodion


int n, d;
	string s;
	cin >> n >> d;
	if (d == 10 && n < 2)
		cout << "-1";
	else if (d == 10 && n >= 2) {
		for (int i = 0; i < n - 1; i++) {
			s += 1 + '0';
		}
		s += 0 + '0';
		cout << s;
	}
	else {
		for (int i = 0; i < n; i++) {
			s += d + '0';
		}
		cout << s;
	}
=========================================================

3==> A. Football

int n, count = 0;
	string s;
	vector<string>v;
	cin >> n;
	while (n--) {
		cin >> s;
		v.push_back(s);
	}
	sort(v.begin(), v.end());
	if (v.size() == 1)
		cout << v[0] << "\n";
	else {
		for (int i = 0; i < v.size(); i++) {
			if (v[i] == v[i + 1])
				count++;
			else
				break;
		}
		if (count+1 > (v.size() / 2))
			cout << v[0] << "\n";
		else
			cout << v[v.size() - 1] << "\n";
	}

=========================================================

4==> A. Brain's Photos

int rows, columns;
	cin >> rows >> columns;
	char ch;
	bool flag = true;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < columns; j++) {
			cin >> ch;
			if (ch == 'C' || ch == 'Y' || ch=='M') {
				flag = false;
				break;
			}
		}
	 }
	if (flag == true)
		
	cout << "#Black&White" << "\n";
 
	else
		cout << "#Color" << "\n";
=========================================================

5==>A. Dubstep


string s;
	bool flag = true;
	cin >> s;
	for (int i = 0; i < s.size(); i++) {
		if (s[i] == 'W' && s[i + 1] == 'U' && s[i + 2] == 'B') {
			i += 2;
			if (!flag) {
				cout << " ";
			}
			continue;
		}
		else {
			flag = false;
			cout << s[i];
		}
	}

=========================================================
6==> A. Valera and X

int rows;
	cin >> rows;
	char array[299][299];
	char ch;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < rows; j++) {
			cin >> ch;
			array[i][j] = ch;
		}
	 }
	bool flag = true;
	char first, second;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < rows; j++) {
			first = array[0][0];
			second = array[0][1];
			if (i == j) {
				if (array[i][j] != first) {
					flag = false;
					break;
				}
			}
			else if(i==rows-1-j){
				if (array[i][j] != first) {
					flag = false;
					break;
				}
				
			}
			else{
				if (second != array[i][j] || array[i][j] == first) {
					flag = false;
					break;
				}
			
			}
			
		}
		if (flag==false)
			break;
	
	}
	if (flag == false)
		cout << "NO" << "\n";
	else
		cout << "YES" << "\n";

=========================================================

7==> A. Arpa’s hard exam and Mehrdad’s naive cheat
int n;
	cin >> n;
	int numbers[] = { 8,4,2,6};
	if (n == 0)
		cout << 1 << "\n";
	else {
		n = (n - 1) % 4;
		cout << numbers[n] << "\n";
	}
 =========================================================
8==> A. Calculating Function


          ll n;
	cin >> n;
	if (n % 2 == 0)
		cout << n / 2 << endl;
	else
		cout << -(((n - 1) / 2) + 1) << endl;

=========================================================
9==>  A. Theatre Square

      long long n, m, a;
	cin >> n >> m >> a;
	 long long value = ceil((double)m / a) * ceil((double)n / a);
	 cout << value << "\n";
=========================================================

10==> A. Anton and Polyhedrons

vector<string>v = { "Tetrahedron","Cube","Octahedron","Dodecahedron","Icosahedron"};
	int n, sum = 0;
	cin >> n;
	 string s;
	while (n--) {
		cin >> s;
		auto it = find(v.begin(), v.end(), s);
		int index = it-v.begin();
		
		switch (index)
		{
		case 0:
			sum += 4;
			break;
		case 1:
			sum += 6;
			break;
		case 2:
			sum += 8;
			break;
		case 3:
			sum += 12;
			break;
		case 4:
			sum += 20;
			break;
		default:
			break;
		}
	}
	cout << sum << "\n";

=========================================================





==== ICPC SU Sheet 5 ======


1==>A. Panoramix's Prediction

  int n, m; bool flag = 0;
        cin >> n >> m;
        if (n == m || m < n)
            cout << "NO" << "\n";
        else if (n == 2 && m == 3)
            cout << "YES" << "\n";
        else if (Isprime(m)) {
            while (!flag) {
 
                if (Isprime(m - 2) && (m - 2) == n) {
                    flag = 1;
                    cout << "YES" << "\n";
                }
                else if (Isprime(m - 2) && (m - 2) != n) {
                    flag = 1;
                    cout << "NO" << "\n";
                }
                else {
                    m -= 2;
                }
 
            }
        }
        else
            cout << "NO" << "\n";


=========================================================
2==> A. Counterexample


ll left, right;
    cin >> left >> right;
     
    if (left % 2 != 0)
        left++;
    if ((right - left) <= 1)
        cout << -1 << endl;
    else
        cout << left << " " << left+1<< " " << left+2 << endl;

=========================================================
3==> Wasted Time

// the idea here based on equation of distance between two points  sqrt (x2-x1)^2 + (y2-y1)^2  and the speed=distance/second
 int points, papers;
                                                                                                     so second=ditance/speed
    cin >> points >> papers;
    double x2, y2, x1, y1, Distance=0.0;
    cin >> x1 >> y1;
    points--;
        while (points--)
        {
            cin >> x2 >> y2; 
                Distance += sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            x1 = x2;
            y1 = y2;
        }
    cout << fixed << setprecision(9) << Distance * papers / 50 << endl;  

=========================================================
4==> A. Fancy Fence                                             
 
all sides equal and angles

Angle=((sides-2)*180)/sides  -->1

 to get sides 
 div by 180
    

Angle/180=(sides-2)/sides  -->  2
 
by multi sides
 
sides*(Angle/180)  = sides-2
 
2=sides- (sides*(Angle/180))

let x=angle/180
 
2=sides-sides(x)
2=sides(1-x)

sides=2/(1-x)

--------------------------------------> the code 


int n;
	cin >> n;
	int angle;
	float sides;
	float newangle;
	while (n--) {
		cin >> angle;
		newangle = angle / 180.00;
		sides= 2.00 / (1.00 - newangle);
		
		if (int(round(sides * 100)) % 100 != 0)
			cout << "NO" << endl;
		else
			cout << "YES" << endl;
	}

=========================================================
5==> A. Pouring Rain

 double d, h, v, e;
    cin >> d >> h >> v >> e;
    double pi = 2 * asin(1.0);
    double ve = pi * (diameter / 2) * (d / 2) * e;
    double v1 = pi * (diameter / 2) * (d / 2) * h;
    if (v <= speed)
    {
        cout<<"NO"<<endl;
        return 0;
    }
    else
    {
        cout << "YES" << endl;
        cout << setprecision(13)<<(v1 / (v - speeed));
    }
   
    










=========================================================
6==>  Good Number


   int size;
    cin >> size;
    int k;
    cin >> k;
 
    int  count = 0;
    while (size--) {
        bool flag= 1;
        string input;
        cin >> input;
        for (int i = 0; i <=k; i++) {
            int ch = input.find(to_string(i));
            if (ch != -1)
                flag = 1;
            else {
                flag = 0;
                break;
            }
        }
        if (flag)
            count++;
    }
    cout << count<< "\n";


=========================================================
7 ==> A. Dice Tower

int size, top,face1, face2;
	cin >> size >> top;
	bool flag = true;
  while(size--){
		cin >> face1 >>face2 ;
		if (face1 == top || face1 == 7 - top || face2 == top || face2 == 7 - top)
		{
			cout << "NO" << endl;
			flag = false;
			break;
		}
	}
  if(flag)
	cout << "YES";


=========================================================

8==> A. Alyona and Numbers


  
	//long long x, y, a[5], b[5];
	//cin >> x >> y;
	///*memset(a, 0, sizeof(a));
	//memset(b, 0, sizeof(b));*/
	//  // we should know the reminders in all numbers of n  and they will be 0,1,2,3,4 because / 5
	////  then  sum the compination
	//for (int i = 1; i <= x; i++) {
		a[i % 5]++;
	}
	for (int i = 1; i <= y; i++) {
		b[i % 5]++;
	}
	cout << (a[0] * b[0] + a[1] * b[4] + a[2] * b[3] + a[3] * b[2] + a[4] * b[1]);




=========================================================
9==> A. Mountain Scenery





























=========================================================
10==> A. Help Vasilisa the Wise 2


bool check(int first, int second, int third, int fourth) {
	if ((1 <= first && first<= 9) && (1 <= second && second <= 9) && (1 <= third && third <= 9) && (1 <= fourth && fourth <= 9)) {
		if(first!=second &&  first!=third && first!=fourth && second!=third && second !=fourth && third!=fourth)
		return true;
		return false;
	}
	else	
	  return false;	
}
 
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	////test cases
 
	//for (int i = 0; i < 7; i++) {
 
		int first, second = 0, third = 0, fourth = 0;
 
		int r1, r2, c1, c2, d1, d2;
		cin >> r1 >> r2 >> c1 >> c2 >> d1 >> d2;
		bool flag = false;
		for (int i = 1; i <= 9; i++) {
			first = i;
			second = r1 - first;
			third = c1 - first;
			fourth = r2 - third;
			if (check(first, second, third, fourth)) {
				if ((first + second == r1) && (first + third == c1) && (third + fourth == r2) &&
					(fourth + second == c2) && (first + fourth == d1) && (second + third == d2)) {
					cout << first << " " << second << "\n" << third << " " << fourth << "\n";
					flag = true;
				}
 
			}
			if (flag)
				break;
 
		}
		if (flag == false)
			cout << -1 << "\n";
===============================================================================================